/* DO NOT EDIT: File is autogenerated */
<% if !schema.sql.default_schema? %>
IF EXISTS ( SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '<%= schema.sql.schema %>')
  DROP SCHEMA <%= q(schema.sql.schema) %>
GO
CREATE SCHEMA <%= q(schema.sql.schema) %>
GO
<% end %>
<%= banner("DDL for Schema '#{schema.name}'") %>
<% schema.object_types.select{|object_type| !object_type.abstract?}.each do |object_type| %>
CREATE TABLE <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>(
<% object_type.attributes.select {|a| a.persistent?}.each do |a|
%>  <%= q(a.sql.column_name) %> <%= a.sql.sql_type %> <%= a.sql.identity? ? 'IDENTITY(1,1) ' : '' %><%= a.nullable? ? '': 'NOT '%>NULL,
<% end
%>  CONSTRAINT PK_<%= object_type.name %> PRIMARY KEY <%= (object_type.sql.indexes.select{|i| i.cluster?}.size == 0) ? '' : 'NON' %>CLUSTERED (<%= q(object_type.primary_key.sql.column_name) %> ASC)
)
GO
<% object_type.attributes.select {|a| a.persistent? && !a.sql.default_value.nil?}.each do |a| %>
ALTER TABLE <%= sql_qualify(object_type.schema, object_type.sql.table_name) %> ADD DEFAULT (<%= quote_value(a.sql.default_value) %>) FOR <%= q(a.sql.column_name) %>
GO
<% end %>
<% object_type.sql.indexes.each do |index| %>
CREATE <%= index.unique? ? 'UNIQUE ' : '' %><%= index.cluster? ? '' : 'NON' %>CLUSTERED INDEX [<%= index.name %>] ON <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
(<%= index.attribute_names.collect {|a| "\n  #{q(object_type.attribute_by_name(a).sql.column_name)} ASC" }.join(",") %>
)<% if !index.include_attribute_names.nil? %> INCLUDE ( <%= index.include_attribute_names.collect {|a| q(object_type.attribute_by_name(a).sql.column_name) }.join(",") %> )<% end %>
GO
<% end %>
<% object_type.sql.foreign_keys.each do |foreign_key| %>
ALTER TABLE <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
  ADD CONSTRAINT [FK_<%= object_type.name %>_<%= foreign_key.name %>] FOREIGN KEY (<%= foreign_key.attribute_names.collect{|a| q(object_type.attribute_by_name(a).sql.column_name)}.join(', ') %>)
  REFERENCES <%= sql_qualify(foreign_key.referenced_object_type.schema, foreign_key.referenced_object_type.sql.table_name) %> (<%= foreign_key.referenced_attribute_names.collect{|a| q(foreign_key.referenced_object_type.attribute_by_name(a).sql.column_name)}.join(', ')  %>)
<% if foreign_key.on_update != :no_action %>  ON UPDATE <%= Domgen::Sql::ForeignKey::ACTION_MAP[foreign_key.on_update] %><% end %>
<% if foreign_key.on_delete != :no_action %>  ON DELETE <%= Domgen::Sql::ForeignKey::ACTION_MAP[foreign_key.on_delete] %><% end %>
GO
<%
  end
  if object_type.sql.constraints.size > 0 %><%=
    banner("Constraints for #{sql_qualify(object_type.schema, object_type.sql.table_name)}")
%><%
      object_type.sql.constraints.each do |constraint|
%>
ALTER TABLE <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
  ADD CONSTRAINT CK_<%= s(object_type.name) %>_<%= s(constraint.name) %> CHECK ( <%= s(constraint.sql) %> )
GO
<%    end
    end
    if object_type.sql.triggers.size > 0 %><%=
    banner("Triggers for #{sql_qualify(object_type.schema, object_type.sql.table_name)}")
%><%
      object_type.sql.triggers.each do |trigger|
%>
CREATE TRIGGER <%= sql_qualify(schema,sql_name(:trigger,"#{object_type.name}#{trigger.name}")) %> ON <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
AFTER INSERT, UPDATE
AS
  SET NOCOUNT ON
<%= trigger.sql %>
GO
<%    end
    end
   immutable_attributes = object_type.attributes.select {|a| a.persistent? && a.immutable? }
   if immutable_attributes.size > 0
    pk = object_type.primary_key
%>
<%= banner("Immutability enforcement for #{sql_qualify(object_type.schema, object_type.sql.table_name)}") %>
CREATE TRIGGER <%= sql_qualify(schema,sql_name(:trigger,"#{object_type.name}Immuter")) %> ON <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
AFTER UPDATE
AS
   SET NOCOUNT ON
   IF <%= immutable_attributes.collect {|a| "UPDATE(#{a.sql.column_name})" }.join(" OR ") %>
   BEGIN
      DECLARE @violations INT
      SELECT @violations = COUNT(*)
      FROM inserted I, deleted D
      WHERE
        I.<%= pk.sql.column_name %> = D.<%= pk.sql.column_name %> AND
        (
          <%= immutable_attributes.collect {|a| "(I.#{a.sql.column_name} != D.#{a.sql.column_name})" }.join(" OR\n") %>
        )
      IF (@@error = 0 AND @violations = 0) GOTO done
      ROLLBACK
      RAISERROR ('Attempted to modify immutable attributes on <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>', 16, 1) WITH SETERROR
done:
   END
GO
<%
    end
    abstract_relationships = object_type.attributes.select {|a| a.reference? && a.referenced_object.abstract? }
    if abstract_relationships.size > 0 %>
<%= banner("Enforcement of psuedo foreign keys to abstract tables for #{sql_qualify(object_type.schema, object_type.sql.table_name)}") %>
<%
      abstract_relationships.each do |attribute|
        concrete_subtypes = {}
        attribute.referenced_object.subtypes.select{|subtype|!subtype.abstract?}.each_with_index do |subtype, index|
          concrete_subtypes["C#{index}"] = subtype
        end
        names = concrete_subtypes.keys
%>
CREATE TRIGGER <%= sql_qualify(schema,sql_name(:trigger,"#{object_type.name}#{attribute.name}ForeignKey")) %> ON <%= sql_qualify(object_type.schema, object_type.sql.table_name) %>
AFTER INSERT, UPDATE
AS
   SET NOCOUNT ON
   IF UPDATE(<%= q(attribute.referencing_link_name) %>)
   BEGIN
      DECLARE @violations INT
      SELECT @violations = COUNT(*)
      FROM
        inserted I
<% concrete_subtypes.each_pair do |name, subtype|
%>      LEFT JOIN <%= sql_qualify(subtype.schema, subtype.sql.table_name) %> <%= name %> ON <%= name %>.ID = I.<%= q(attribute.referencing_link_name) %>
<% end
%>      WHERE (<%= names.collect{|name| "#{name}.ID IS NULL"}.join(' AND ') %>)<%

(0..(names.size - 2)).each do |index|
%> OR
              (<%= names[index] %>.ID IS NOT NULL AND (<%= ((index + 1)..(names.size - 1)).collect {|index| "#{names[index]}.ID IS NOT NULL"}.join(' OR ') %>))
<% end %>
      IF (@@error = 0 AND @violations = 0) GOTO done
      ROLLBACK
      RAISERROR ('<%= sql_qualify(object_type.schema, object_type.sql.table_name) %>.<%= q(attribute.referencing_link_name) %> should reference a single row in concrete subclasses', 16, 1) WITH SETERROR
done:
   END
GO
<%
      end
    end
  end
%>
