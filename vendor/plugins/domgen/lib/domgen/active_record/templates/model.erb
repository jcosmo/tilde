# DO NOT EDIT: File is autogenerated
module <%= object_type.schema.ruby.module_name %>

class <%= object_type.ruby.classname %> < ActiveRecord::Base
  # Attributes:
<% object_type.attributes.select{|a| a.persistent?}.each do |a|
%>  #   <%= a.sql.column_name %>: <%= a.reference? ? a.referenced_object.name : a.attribute_type %>
<% end %>
  set_table_name "<%= sql_qualify(object_type.schema,object_type.sql.table_name).gsub('[','').gsub(']','').gsub('dbo.','') %>"
  set_primary_key "<%= object_type.primary_key.sql.column_name %>"
<% object_type.attributes.each do |a|
   if a.persistent? && a.validate?
       if !a.generated_value?
         if a.attribute_type == :i_enum || a.attribute_type == :s_enum
           a.values.each do |k,v|
%>  <%= a.name %>_<%= ruby_name(k) %> = <%= v.inspect %>
<%         end
%>  <%= a.name %>Values = [<%= a.values.keys.collect{|k| "#{a.name}_#{ruby_name(k)}"}.join(', ') %>]
  validates_inclusion_of :<%= a.sql.column_name %>, :in => <%= a.name %>Values<% if a.nullable? %>, :allow_nil => true <% end %>
<%
         end
         if !a.nullable? && a.attribute_type != :boolean
%>  validates_presence_of :<%= a.sql.column_name %>
<%       end
         if a.unique?
%>  validates_uniqueness_of :<%= a.sql.column_name %>
<%       end
         if a.attribute_type == :integer
%>  validates_numericality_of :<%= a.sql.column_name %>, :only_integer => true, :allow_nil => true
<%       end
         if a.attribute_type == :real
%>  validates_numericality_of :<%= a.sql.column_name %>, :only_integer => false, :allow_nil => true
<%       end
         if a.attribute_type == :boolean
%>  validates_boolean :<%= a.sql.column_name %>, :allow_nil => <%= a.nullable? %>
<%         if a.nullable?
%>  nillable_boolean :<%= a.sql.column_name %>
<%         end
         end
         if a.attribute_type == :string || a.attribute_type == :s_enum || a.attribute_type == :text
%>  nillable_attribute :<%= a.sql.column_name %>
<%       end
         if a.attribute_type == :string || a.attribute_type == :s_enum
%>  validates_length_of :<%= a.sql.column_name %>, :maximum => <%= a.length %>, :allow_nil => true
<%       end
         if a.reference?
%>  belongs_to :<%= underscore(a.name) %>, :class_name => '<%= a.referenced_object.ruby.fully_qualified_name %>', :foreign_key => '<%= a.sql.column_name %>'
  validates_reference_exists :<%= a.sql.column_name %>, <%= a.referenced_object.ruby.fully_qualified_name %>, :association_name => :<%= underscore(a.name) %>, :allow_nil => true
<%       end
       end
     end
   end %>
<% object_type.referencing_attributes.each do |attribute|
    if attribute.inverse_relationship_type == :has_many
%>
  has_many :<%= pluralize(underscore(attribute.inverse_relationship_name)) %>, :class_name => '<%= attribute.object_type.ruby.fully_qualified_name %>', :foreign_key => '<%= attribute.sql.column_name %>', :dependent => :destroy
  has_count_of :<%= pluralize(underscore(attribute.inverse_relationship_name)) %>
<%
    elsif attribute.inverse_relationship_type == :has_one
%>
  has_one :<%= underscore(attribute.inverse_relationship_name) %>, :class_name => '<%= attribute.object_type.ruby.fully_qualified_name %>', :foreign_key => '<%= attribute.sql.column_name %>', :dependent => :destroy
<%
    end
  end
%>

<% object_type.unique_constraints.each do |c|
 attributes = c.attribute_names.collect{|attribute_name| object_type.attribute_by_name(attribute_name)}
%>
  validates_uniqueness_of :<%= attributes.shift.sql.column_name %><% if !attributes.empty? %>, :scope => [<%= attributes.collect{|a|":#{a.sql.column_name}"}.join(", ") %>]<% end %>
<% end %>
<% object_type.codependent_constraints.each do |c| %>
  validates_codependent <%= c.attribute_names.collect{|attribute_name|":#{attribute_name}"}.join(', ') %>
<% end %>
<% object_type.scope_constraints.each do |c|
  target_attribute = object_type.attribute_by_name(c.attribute_name)
%>
  validate do |record|
    if !record.<%= target_attribute.name %>.nil? && record.<%= underscore(target_attribute.name) %>.<%= c.scoping_attribute %> != record<%= c.attribute_name_path[0,c.attribute_name_path.length-1].collect{|a|".#{underscore(a)}"}.join('') %>.<%= c.attribute_name_path.last %>
      record.errors.add(:<%= target_attribute.name %>, 'must be one of the values in scope')
    end
  end
<% end %>
<%= object_type.ruby.included_modules.collect {|m| "  include #{m}"}.join("\n") %>
  # Make it possible for the users to extend the model by defining an extension class
  include <%= object_type.ruby.fully_qualified_name %>Extension rescue NameError
end

end